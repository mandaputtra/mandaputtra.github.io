(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{154:function(n,e,t){(function(e){var t=function(n){var e=/\blang(?:uage)?-([\w-]+)\b/i,t=0,l={manual:n.Prism&&n.Prism.manual,disableWorkerMessageHandler:n.Prism&&n.Prism.disableWorkerMessageHandler,util:{encode:function(n){return n instanceof r?new r(n.type,l.util.encode(n.content),n.alias):Array.isArray(n)?n.map(l.util.encode):n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(n){return Object.prototype.toString.call(n).slice(8,-1)},objId:function(n){return n.__id||Object.defineProperty(n,"__id",{value:++t}),n.__id},clone:function n(e,t){var r,o,c=l.util.type(e);switch(t=t||{},c){case"Object":if(o=l.util.objId(e),t[o])return t[o];for(var h in r={},t[o]=r,e)e.hasOwnProperty(h)&&(r[h]=n(e[h],t));return r;case"Array":return o=l.util.objId(e),t[o]?t[o]:(r=[],t[o]=r,e.forEach(function(e,i){r[i]=n(e,t)}),r);default:return e}}},languages:{extend:function(n,e){var t=l.util.clone(l.languages[n]);for(var r in e)t[r]=e[r];return t},insertBefore:function(n,e,t,r){var o=(r=r||l.languages)[n],c={};for(var h in o)if(o.hasOwnProperty(h)){if(h==e)for(var d in t)t.hasOwnProperty(d)&&(c[d]=t[d]);t.hasOwnProperty(h)||(c[h]=o[h])}var m=r[n];return r[n]=c,l.languages.DFS(l.languages,function(e,t){t===m&&e!=n&&(this[e]=c)}),c},DFS:function n(e,t,r,o){o=o||{};var c=l.util.objId;for(var i in e)if(e.hasOwnProperty(i)){t.call(e,i,e[i],r||i);var h=e[i],d=l.util.type(h);"Object"!==d||o[c(h)]?"Array"!==d||o[c(h)]||(o[c(h)]=!0,n(h,t,i,o)):(o[c(h)]=!0,n(h,t,null,o))}}},plugins:{},highlightAll:function(n,e){l.highlightAllUnder(document,n,e)},highlightAllUnder:function(n,e,t){var r={callback:t,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};l.hooks.run("before-highlightall",r);for(var element,o=r.elements||n.querySelectorAll(r.selector),i=0;element=o[i++];)l.highlightElement(element,!0===e,r.callback)},highlightElement:function(element,t,r){for(var o,c,h=element;h&&!e.test(h.className);)h=h.parentNode;h&&(o=(h.className.match(e)||[,""])[1].toLowerCase(),c=l.languages[o]),element.className=element.className.replace(e,"").replace(/\s+/g," ")+" language-"+o,element.parentNode&&(h=element.parentNode,/pre/i.test(h.nodeName)&&(h.className=h.className.replace(e,"").replace(/\s+/g," ")+" language-"+o));var d={element:element,language:o,grammar:c,code:element.textContent},m=function(n){d.highlightedCode=n,l.hooks.run("before-insert",d),d.element.innerHTML=d.highlightedCode,l.hooks.run("after-highlight",d),l.hooks.run("complete",d),r&&r.call(d.element)};if(l.hooks.run("before-sanity-check",d),d.code)if(l.hooks.run("before-highlight",d),d.grammar)if(t&&n.Worker){var k=new Worker(l.filename);k.onmessage=function(n){m(n.data)},k.postMessage(JSON.stringify({language:d.language,code:d.code,immediateClose:!0}))}else m(l.highlight(d.code,d.grammar,d.language));else m(l.util.encode(d.code));else l.hooks.run("complete",d)},highlight:function(text,n,e){var t={code:text,grammar:n,language:e};return l.hooks.run("before-tokenize",t),t.tokens=l.tokenize(t.code,t.grammar),l.hooks.run("after-tokenize",t),r.stringify(l.util.encode(t.tokens),t.language)},matchGrammar:function(text,n,e,t,o,c,h){for(var d in e)if(e.hasOwnProperty(d)&&e[d]){if(d==h)return;var m=e[d];m="Array"===l.util.type(m)?m:[m];for(var k=0;k<m.length;++k){var pattern=m[k],j=pattern.inside,y=!!pattern.lookbehind,w=!!pattern.greedy,f=0,v=pattern.alias;if(w&&!pattern.pattern.global){var _=pattern.pattern.toString().match(/[imuy]*$/)[0];pattern.pattern=RegExp(pattern.pattern.source,_+"g")}pattern=pattern.pattern||pattern;for(var i=t,S=o;i<n.length;S+=n[i].length,++i){var F=n[i];if(n.length>text.length)return;if(!(F instanceof r)){if(w&&i!=n.length-1){if(pattern.lastIndex=S,!(O=pattern.exec(text)))break;for(var x=O.index+(y?O[1].length:0),A=O.index+O[0].length,P=i,p=S,N=n.length;P<N&&(p<A||!n[P].type&&!n[P-1].greedy);++P)x>=(p+=n[P].length)&&(++i,S=p);if(n[i]instanceof r)continue;I=P-i,F=text.slice(S,p),O.index-=S}else{pattern.lastIndex=0;var O=pattern.exec(F),I=1}if(O){y&&(f=O[1]?O[1].length:0);A=(x=O.index+f)+(O=O[0].slice(f)).length;var C=F.slice(0,x),T=F.slice(A),M=[i,I];C&&(++i,S+=C.length,M.push(C));var $=new r(d,j?l.tokenize(O,j):O,v,O,w);if(M.push($),T&&M.push(T),Array.prototype.splice.apply(n,M),1!=I&&l.matchGrammar(text,n,e,i,S,!0,d),c)break}else if(c)break}}}}},tokenize:function(text,n){var e=[text],t=n.rest;if(t){for(var r in t)n[r]=t[r];delete n.rest}return l.matchGrammar(text,e,n,0,0,!1),e},hooks:{all:{},add:function(n,e){var t=l.hooks.all;t[n]=t[n]||[],t[n].push(e)},run:function(n,e){var t=l.hooks.all[n];if(t&&t.length)for(var r,i=0;r=t[i++];)r(e)}},Token:r};function r(n,content,e,t,l){this.type=n,this.content=content,this.alias=e,this.length=0|(t||"").length,this.greedy=!!l}if(n.Prism=l,r.stringify=function(n,e,t){if("string"==typeof n)return n;if(Array.isArray(n))return n.map(function(element){return r.stringify(element,e,n)}).join("");var o={type:n.type,content:r.stringify(n.content,e,t),tag:"span",classes:["token",n.type],attributes:{},language:e,parent:t};if(n.alias){var c=Array.isArray(n.alias)?n.alias:[n.alias];Array.prototype.push.apply(o.classes,c)}l.hooks.run("wrap",o);var h=Object.keys(o.attributes).map(function(n){return n+'="'+(o.attributes[n]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+o.tag+' class="'+o.classes.join(" ")+'"'+(h?" "+h:"")+">"+o.content+"</"+o.tag+">"},!n.document)return n.addEventListener?(l.disableWorkerMessageHandler||n.addEventListener("message",function(e){var t=JSON.parse(e.data),r=t.language,code=t.code,o=t.immediateClose;n.postMessage(l.highlight(code,l.languages[r],r)),o&&n.close()},!1),l):l;var script=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return script&&(l.filename=script.src,l.manual||script.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(l.highlightAll):window.setTimeout(l.highlightAll,16):document.addEventListener("DOMContentLoaded",l.highlightAll))),l}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});n.exports&&(n.exports=t),void 0!==e&&(e.Prism=t),t.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s\/>])))+)?\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},t.languages.markup.tag.inside["attr-value"].inside.entity=t.languages.markup.entity,t.hooks.add("wrap",function(n){"entity"===n.type&&(n.attributes.title=n.content.replace(/&amp;/,"&"))}),Object.defineProperty(t.languages.markup.tag,"addInlined",{value:function(n,e){var l={};l["language-"+e]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:t.languages[e]},l.cdata=/^<!\[CDATA\[|\]\]>$/i;var r={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:l}};r["language-"+e]={pattern:/[\s\S]+/,inside:t.languages[e]};var o={};o[n]={pattern:RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g,n),"i"),lookbehind:!0,greedy:!0,inside:r},t.languages.insertBefore("markup","cdata",o)}}),t.languages.xml=t.languages.extend("markup",{}),t.languages.html=t.languages.markup,t.languages.mathml=t.languages.markup,t.languages.svg=t.languages.markup,function(n){var e=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;n.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?[\s\S]*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:RegExp("url\\((?:"+e.source+"|.*?)\\)","i"),selector:RegExp("[^{}\\s](?:[^{};\"']|"+e.source+")*?(?=\\s*\\{)"),string:{pattern:e,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},n.languages.css.atrule.inside.rest=n.languages.css;var t=n.languages.markup;t&&(t.tag.addInlined("style","css"),n.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:t.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:n.languages.css}},alias:"language-css"}},t.tag))}(t),t.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},t.languages.javascript=t.languages.extend("clike",{"class-name":[t.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\d+n|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),t.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,t.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^\/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:t.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:t.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:t.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:t.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),t.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:t.languages.javascript}},string:/[\s\S]+/}}}),t.languages.markup&&t.languages.markup.tag.addInlined("script","javascript"),t.languages.js=t.languages.javascript,"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(n){n=n||document;var e={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(n.querySelectorAll("pre[data-src]")).forEach(function(pre){if(!pre.hasAttribute("data-src-loaded")){for(var n,l=pre.getAttribute("data-src"),r=pre,o=/\blang(?:uage)?-([\w-]+)\b/i;r&&!o.test(r.className);)r=r.parentNode;if(r&&(n=(pre.className.match(o)||[,""])[1]),!n){var c=(l.match(/\.(\w+)$/)||[,""])[1];n=e[c]||c}var code=document.createElement("code");code.className="language-"+n,pre.textContent="",code.textContent="Loading…",pre.appendChild(code);var h=new XMLHttpRequest;h.open("GET",l,!0),h.onreadystatechange=function(){4==h.readyState&&(h.status<400&&h.responseText?(code.textContent=h.responseText,t.highlightElement(code),pre.setAttribute("data-src-loaded","")):h.status>=400?code.textContent="✖ Error "+h.status+" while fetching file: "+h.statusText:code.textContent="✖ Error: File does not exist or is empty")},h.send(null)}}),t.plugins.toolbar&&t.plugins.toolbar.registerButton("download-file",function(n){var pre=n.element.parentNode;if(pre&&/pre/i.test(pre.nodeName)&&pre.hasAttribute("data-src")&&pre.hasAttribute("data-download-link")){var e=pre.getAttribute("data-src"),a=document.createElement("a");return a.textContent=pre.getAttribute("data-download-link-label")||"Download",a.setAttribute("download",""),a.href=e,a}})},document.addEventListener("DOMContentLoaded",function(){self.Prism.fileHighlight()}))}).call(this,t(19))},155:function(n,e,t){var map={"./04-05-2019-fun_fun_function_usage.md":156,"./04-06-2019-some_gold_talk_that_i_watch.md":157,"./13-04-2019-simple_blog_site_with_nuxt_and_markdown.md":158,"./18-04-2019-trying_queue_with_node_resque.md":159};function l(n){var e=r(n);return t(e)}function r(n){if(!t.o(map,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return map[n]}l.keys=function(){return Object.keys(map)},l.resolve=r,n.exports=l,l.id=155},156:function(n,e,t){"use strict";t.r(e),e.default='<section><hr>\n<h2>id: 3<br>\ntitle: Fun Fun Function Usage<br>\ncreated_date: 04/05/2019<br>\nslug: fun_fun_function_usage<br>\nfilename: 04-05-2019-fun_fun_function_usage<br>\ncategory: rant</h2>\n<p>Hi! 😃 this is not right. Mungkin ini adalah beberapa cara kita membuat fungsi di JavaScript yang jarang kita gunakan dan saya harap beberapa contoh disini tidak digunakan atau hanya jarang digunakan. Welcome to JavaScript function jungle!</p>\n<h2>Callback and Callback Promises</h2>\n<blockquote>\n<p>jangan dipakai yak, sekarang sudah jamannya promise. anda tidak mungkin juga kan bikin library lalu kasih tagline &quot;still support callback&quot;</p>\n</blockquote>\n<p>Jikalau code snippet di bawah ini pernah terlintas di kepala kita, dan kita bertanya bagaimana sih caranya membuat yang seperti ini :</p>\n<pre><code class="language-js"><span class="hljs-comment">// then - cacth</span>\nmymodel.find({ <span class="hljs-attr">name</span>: <span class="hljs-string">\'Agus Sumboro\'</span> }).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(data)) <span class="hljs-comment">// works</span>\n\n<span class="hljs-comment">// async await</span>\n<span class="hljs-keyword">await</span> mymodel.find({ <span class="hljs-attr">name</span>: <span class="hljs-string">\'Agus Sumboro\'</span> }) <span class="hljs-comment">// works</span>\n\n<span class="hljs-comment">// callback</span>\nmymodel.find({ <span class="hljs-attr">name</span>: <span class="hljs-string">\'Agus Sumboro\'</span> }, (data) =&gt; {\n  <span class="hljs-built_in">console</span>.log(data) <span class="hljs-comment">// works also</span>\n})\n\n<span class="hljs-comment">// dan contoh lainnya</span>\n</code></pre>\n<p>yup, pertama kita harus pahami dulu bagaimana sih cara membuat <em>callback</em>, atau gampangnya sebuah <em>function</em> yang return valuenya adalah <em>function</em> :</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">params, cb</span>) </span>{\n  cb(params)\n}\n\ncallback(<span class="hljs-string">\'Halo Isabela\'</span>, <span class="hljs-built_in">console</span>.log) <span class="hljs-comment">// Halo Isabela</span>\n</code></pre>\n<p>oke ini hanya support callback saja, lalu bagaimana jika ini support promise juga? saya sempat ingin membuat pull request di mongoose soal <a href="https://github.com/Automattic/mongoose/issues/7633">views karena menarik</a> di sinilah saya tau kalau ternyata cara sebuah library menghandle <a href="https://github.com/Automattic/mongoose/blob/e25b5aef0b7e5706221d191cfae223e10631b027/lib/query.js#L2070">ini</a> cukup unik :</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cbPromises</span>(<span class="hljs-params">params, callback</span>) </span>{\n  <span class="hljs-keyword">const</span> error = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`<span class="hljs-subst">${params}</span> Not A Number`</span>)\n  <span class="hljs-comment">// check if its function return callback if not return promise</span>\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">\'function\'</span>) {\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(params)) <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, error) <span class="hljs-comment">// isNaN() not a number</span>\n    <span class="hljs-keyword">return</span> callback(params)\n  }\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isNaN</span>(params)) reject(error)\n    resolve(params)\n  })\n}\n\n<span class="hljs-comment">//  now this works yay!</span>\ncbPromises(<span class="hljs-string">\'Halo\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data, err</span>) </span>{\n  <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message) <span class="hljs-comment">// Halo Not A Number</span>\n  <span class="hljs-built_in">console</span>.log(data)\n})\n\ncbPromises(<span class="hljs-number">13</span>)\n  .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(data)) <span class="hljs-comment">// 13</span>\n  .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(err.message))\n</code></pre>\n<p>Menurut saya agak naif menyuruh seorang \'newbie\' (saya disini me-<em>refer</em> orang yang baru masuk ke dunia JS) menggunakan <code>async await</code> atau <code>Promise</code> tanpa memberinya kejelasan dahulu bagaimana cara kita membuat promise atau callback. <em>Lest be clear here, and admit something...</em> kita sendiri jarang membuat Promise apalagi Callback kalau di dunia front-end paling saya buat promise cuma untuk <em>Loading Screen</em>. <em>At least we understand how it works and why promise and async is a thing not just syntatic sugar don\'t we?</em> 😁.</p>\n<p>Saya juga belum lama masuk ke dunia JS, mungkin 2 tahun kurang lebih. Saat saya pertama kali kerja (dan saat ini saya masih disana juga), salah satu proyek kantor saya adalah aplikasi dengan 300k++ loc (line of code). First commit program itu tercatat 2015 Januari, yaudah callback hell. hahaha. Biasanya program seperti ini di maintain 6 orang kalau di startup, dikarenakan resource minim cuma 2 orang 😂 yah satu cuti satu kena hajar callback.</p>\n<p>Lanjut...</p>\n<h2>Recursive Function</h2>\n<p>Pernah ga ngalamin error seperti ini :</p>\n<ul>\n<li><code>ERR: ENAMETOOLONG</code> ternyata panjang nama sebuah file/argumen di terminal kita itu terbatas, lebih tepatnya dibatasi oleh OS.</li>\n<li><code>warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.</code></li>\n</ul>\n<p>Saya sering menemukan ini saat pertama belajar video processing, atau berkerja dengan <code>child_process</code>, <em><strong>mungkin</strong></em> penerapan function ini bisa membantu menyelesaikan masalah. Mungkin besok saya open ke github reponya setelah selesai bersih - bersih yang ga perlu, atau mungkin buat artikel soal video processing saja.</p>\n<pre><code class="language-js"><span class="hljs-comment">// recursive is fun</span>\n<span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]\n<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursiveFun</span>(<span class="hljs-params"></span>) </span>{\n  i++\n  <span class="hljs-keyword">const</span> element = arr[i]\n  <span class="hljs-keyword">if</span>(element === <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(element)\n  recursiveFun()\n}\n</code></pre>\n<p>Cara kerja function diatas sangat simple, ambil <code>arr</code> posisi ke <code>i</code>, kalau <code>element</code> bukan 4 maka <code>i+1</code> panggil fungsi <code>recursiveFun()</code> lagi. Bagusnya function seperti ini dia menyimpan value variable yang ada diluarnya. Tentu ini sangat rare digunakan, dan saya sarankan tidak mengunakan ini kalu belum ketemu error seperti diatas yang <em><strong>mungkin</strong></em> saja solusinya adalah ini.</p>\n<p>Salah satu code yang mungkin men-<em>trigger</em> error <code>possible EventEmitter memory leak detected.</code> :</p>\n<pre><code class="language-js"><span class="hljs-keyword">let</span> arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]] <span class="hljs-comment">// big two dimensional array</span>\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {\n  <span class="hljs-keyword">const</span> element = arr[i];\n  supremeHardFunction(element)\n}\n</code></pre>\n<p>Jarang terjadi tapi mungkin anda alami, jangan sekali kali menambah <code>eventListener</code> kalau memang tidak perlu atau tidak bisa dihindari.</p>\n<h1>Closures Function</h1>\n<p>Saya yakin kalau ini sering banyak digunakan dan sangat saya sarankan digunakan. closures merupakan sebuah pattern untuk memberikan private access pada sebuah variable dalam sebuah <em>function</em>. Saya ambil contoh dari MDN saja.</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> name = <span class="hljs-string">\'Mozilla\'</span>; <span class="hljs-comment">// name merupakan local variable yang ada pada init</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayName</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-comment">// displayName() merupakan inner function, closures</span>\n    alert(name); <span class="hljs-comment">// bisa menggunakan variable pada parent function</span>\n  }\n  displayName();\n}\ninit();\n</code></pre>\n<p>Dan sebenarnya kita sering memakai ini, saya sering menggunakan ini saat memakai modul <code>request</code> atau mungkin <code>fetch API</code>. Seperti inilah bentuknya :</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">api</span>(<span class="hljs-params">key</span>) </span>{\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url</span>) </span>{\n    <span class="hljs-keyword">return</span> fetch(<span class="hljs-string">`<span class="hljs-subst">${url}</span>?key=<span class="hljs-subst">${key}</span>`</span>)\n  }\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params">url, params</span>) </span>{\n    <span class="hljs-keyword">return</span> fetch(url, {\n      <span class="hljs-attr">method</span>: <span class="hljs-string">\'POST\'</span>,\n      <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(params),\n      <span class="hljs-attr">headers</span>: {\n        <span class="hljs-string">\'Authorization\'</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${key}</span>`</span>\n      }\n    })\n  }\n\n  <span class="hljs-keyword">return</span> { <span class="hljs-keyword">get</span>, post }\n}\n\nconst request = api(\'super-key-bruh!\')\n// oops kita dah ga perlu lagi masukin API key!\nrequest.<span class="hljs-keyword">get</span>(\'https://haloexample.com/getexample\')\nrequest.post(\'https://haloexample.com/postexample\', { halo: <span class="hljs-string">\'Isabela\'</span> })\n</code></pre>\n<h2>Fluent Function / Methods Chaining</h2>\n<p>Sebenarnya saya agak lupa namanya Fluent Function/Waterfall Function banyak yang menyebut Methods Chaining. Tapi tentu sintak dibawah ini tidak asing.</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> λ = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'rambda.js)\n\n//  not really a lamda function just example\nλ.chop([1, 2, 3, 1])\n  .reduce(a =&gt; a + b)\n  .toString()\n</span></code></pre>\n<p>Yup, jika pernah terlintas bagaimana sih caranya membuat yang seperti itu. Untuk sesuatu yang simple ini saya memutuskan untuk menggunkan function saja, sebenarnya banyak library modern sekarang sudah menggunakan <code>class</code>.</p>\n<pre><code class="language-js"><span class="hljs-comment">// ini function tapi bisa disebut class...</span>\n\n<span class="hljs-keyword">const</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-comment">// define constructor</span>\n  <span class="hljs-keyword">this</span>.name = <span class="hljs-string">\'Julia\'</span>;\n  <span class="hljs-keyword">this</span>.shirt = <span class="hljs-string">\'blue\'</span>;\n  <span class="hljs-keyword">this</span>.gender = <span class="hljs-string">\'female\'</span>;\n};\n\n<span class="hljs-comment">//  use prototype class function</span>\nPerson.prototype.setName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>{\n  <span class="hljs-keyword">this</span>.name = name;\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">// this adalah koenchi</span>\n};\n\nPerson.prototype.setShirt = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">shirt</span>) </span>{\n  <span class="hljs-keyword">this</span>.shirt = shirt;\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">// this adalah koenchi</span>\n};\n\nPerson.prototype.setGender = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">gender</span>) </span>{\n  <span class="hljs-keyword">this</span>.gender = gender;\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">// this adalah koenchi</span>\n};\n\nPerson.prototype.introduce = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">const</span> sheOrHe = <span class="hljs-keyword">this</span>.gender === <span class="hljs-string">\'male\'</span> ? <span class="hljs-string">\'he\'</span> : <span class="hljs-string">\'she\'</span>\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`This is <span class="hljs-subst">${<span class="hljs-keyword">this</span>.name}</span>, <span class="hljs-subst">${sheOrHe}</span> wear <span class="hljs-subst">${<span class="hljs-keyword">this</span>.shirt}</span> shirt`</span>)\n\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">// this adalah koenchi</span>\n};\n</code></pre>\n<p>Lalu dengan ini kita bisa gunakan snippet diatas secara indah :</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> isabela = <span class="hljs-keyword">new</span> Person()\n  .setName(<span class="hljs-string">\'Isabela\'</span>)\n  .setShirt(<span class="hljs-string">\'red\'</span>)\n  .setGender(<span class="hljs-string">\'female\'</span>)\n  .introduce()\n\n<span class="hljs-comment">// atau</span>\n\n<span class="hljs-keyword">const</span> wawan = <span class="hljs-keyword">new</span> Person()\nwawan.setName(<span class="hljs-string">\'Wawan\'</span>)\nwawan.setShirt(<span class="hljs-string">\'blue\'</span>)\nwawan.setGender(<span class="hljs-string">\'male\'</span>)\nwawan.introduce()\n</code></pre>\n<p>Oke jika anda menggunakan code diatas tanpa <code>return this</code>.</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> juni = <span class="hljs-keyword">new</span> Person()\njuni.setName(<span class="hljs-string">\'Juni\'</span>).setGender(<span class="hljs-string">\'male\'</span>)\n\n<span class="hljs-keyword">const</span> hey = <span class="hljs-keyword">new</span> Person()\n<span class="hljs-keyword">const</span> juni = hey.setName(<span class="hljs-string">\'Juni\'</span>)\njuni.setGender(<span class="hljs-string">\'male\'</span>)\n\n<span class="hljs-comment">// setGender is not a function</span>\n</code></pre>\n<p>ini dikarenakan <code>setName</code> sama sekali tidak me-<em>return</em> value, jadi saat <code>setGender</code> mau mengakses dia dapetnya <code>undefined</code> kasian. Jadi saat anda membuat function dan memanggil <code>this</code> pada saat return, ada kemungkinan anda mengembalikan nilai atau value di function tersebut.</p>\n<pre><code class="language-md">🙋: Lha kalau aku panggil <span class="hljs-code">`this`</span> ini kok malah keluarnya dari instance framework?\n🐨: That\'s another story...\n</code></pre>\n<p>Yak terimakasih telah membaca sampai akhir seperti biasa saya selalu open feedback, silahakan buat issue di repo blog <a href="https://github.com/mandaputtra/mandaputtra.github.io/issues">ini</a> atau mugkin mention saya di <a href="https://twitter.com/_mandaputtra">twitter</a>.</p>\n<p>Wrapping up! sebenarnya masih ada banyak sekali function pattern yang biasa dipakai pada JavaScript tapi tentunya tidak bisa saya cover semua karena saya juga masih baru di dunia JS/Node.js ini, hal diatas hanya beberapa pattern yang setidaknya pernah saya gunakan, semoga dapat membantu saat ingin membuat <em>library</em> di npm atau malah ingin berkontribusi ke beberapa <em>library</em> yang sudah ada. Thanks all and as usual have a nice day! 😄</p>\n<h2>Tips</h2>\n<p><em>Always name your function</em>, dengan begitu kita tidak susah - susah saat profiling code kita jikalau memang nantinya perlu di profiling code-nya. Jika tidak tidak apa apa, karena memang jarang sekali kasus - kasus memory leak.</p>\n<pre><code class="language-js"><span class="hljs-comment">// dont do this :(</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> aUsualFunction = <span class="hljs-function">(<span class="hljs-params">params, params2</span>) =&gt;</span> { <span class="hljs-comment">/** do stuff*/</span> }\n\n<span class="hljs-comment">// do this instead</span>\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aUsualFunction</span>(<span class="hljs-params">params, paramas3</span>) </span>{\n  <span class="hljs-comment">// do stuff</span>\n}\n</code></pre>\n</section>\n'},157:function(n,e,t){"use strict";t.r(e),e.default='<section><hr>\n<h2>id: 4<br>\ntitle: Some Gold Talk That I Watch<br>\ncreated_date: 04/06/2019<br>\nslug: some_gold_talk_that_i_watch<br>\nfilename: 04-06-2019-some_gold_talk_that_i_watch<br>\ncategory: infomartion</h2>\n<p>Hi now I would love to share some gold talks around programming that I found over on the Internet, the talk kinda not just cover on Node.js world but also progrramming in general. This talk are mostly opinion so don\'t take it seriously if you think it isn\'t right, take that seriously and tweet/email at man/woman who give presentation not me, however if you think I should explain on some topics, I would love to explain if I could do that.</p>\n<h3>Brian Will on OOP</h3>\n<p>First talk are from youtuber named Brian Will, <em>I think</em> he hates OOP as main programming pradigm that kinda spread on the market now he talk about that in the following videos he posted on his youtube, his videos :</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=lbXsrHGhBAU&amp;t=34s">Object Oriented Programming Basics</a></li>\n</ul>\n<p>I recommend watching that first If you did not know about OOP he explain it well, more well than my lecture. Then if you understand it and have some application written on OOP, like really OOPish like this <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">app</a> You maybe want to watch this later talk then</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=QM1iUe6IofM&amp;t=449s">Object Oriented Programming is Bad</a></li>\n<li><a href="https://www.youtube.com/watch?v=IRTfhkiAqPw">Object Oriented Programming is Embarasing : 4 Short Examples</a></li>\n<li><a href="https://www.youtube.com/watch?v=V6VP-2aIcSc&amp;t=729s">Object Oriented Programming is Garbage : 3800 LOC Example</a></li>\n</ul>\n<p>Then watch this talk from him too after that 3 talk and now you understand why he talk like that.</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=0iyB0_qPvWk&amp;t=70s">Object Oriented Programming is Good*</a></li>\n</ul>\n<p>My response on Brian W. talk was, this guy is awesome. I written some game back-then with C++ (this had class comparing to C) I dont know github back-then and I forgot what books do I read, however there is some group at facebook named <em>C/C++/C# Developer Indonesia</em> I think I got that book from there.</p>\n<p>It was game development book and its heavily OOPish (I know OOP because that books said so) writting on OOP are good for sharing data beetween game class, but the code can be decoupled and make things more complicated. I started confuse myself on what is this thing, how it work? If you never developing a game that shared states beetwen class, its kinda hard to know what is this guy talking about.</p>\n<p>I agree on Brian Will, OOP are complicated, but in some ways it simplify on making docs, and refactoring on IDE. Some OOP language had this beautiful refactoring tool that soo powerfull like Java. However the decoupled thing on OOP and this should be here this should be here can make you confuse.</p>\n<p>I love TS, I love the type cheking but why people keep coined that Strict Type programming language are easy to maintain? It is not, there will be a bug, Interface and Decorators can\'t save you from bugs. JavaScript nowadays are trying to be &quot;Hey use TS bro, not JS&quot; why?</p>\n<p>Procedural, Imperative, <a href="https://github.com/getify/Functional-Light-JS">Light Functional</a> Programming are still the best for me. I think we should combine all the good from programming paradigm, and use it as new paradigm.</p>\n<p>Go checkout Brian Will he had many videos, that covers most on programming basics, and some programming pragmatic, or just awesome game development.</p>\n<h3>Ryan Dalh talk</h3>\n<p>A collection of Ryan Dahl the creator of Node.js :</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=SAc0vQCC6UQ">You should watch this if you curious</a></li>\n<li><a href="https://www.youtube.com/watch?v=ztspvPYybIY">Node.js presentation</a></li>\n<li><a href="https://www.youtube.com/watch?v=M3BM9TB-8yA">10 Things I regret on Node.js</a></li>\n<li><a href="https://www.youtube.com/watch?v=z6JRlx5NC9E&amp;t=2378s">Deno</a></li>\n<li><a href="https://www.youtube.com/watch?v=z6JRlx5NC9E&amp;t=2378s">Deno part 2</a></li>\n</ul>\n<p>The history of Node.js is fun enough to hear, glad to watch it</p>\n<h3>Node.js Performance Talk (Debugging Memory Leaks)</h3>\n<p>Sometimes performance matters, sometimes...</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=ZWnMnwudPGU">My Node.js Process are On Fire - Matteo Collina</a></li>\n<li><a href="https://www.youtube.com/watch?v=O1YP8QP9gLA">Debugging Node.js In Production - Yunong Xiao</a></li>\n<li><a href="https://www.youtube.com/watch?v=hliOMEQRqf8&amp;t=692s">Understanding Debugging Node.js Memory Leaks</a></li>\n<li><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;t=1s">What the heck event loop anyway?</a></li>\n<li><a href="https://www.youtube.com/watch?v=5b79ZIQBXsg">Memory Profiler</a></li>\n</ul>\n<h3>Some incredible talks to watch in Programming World</h3>\n<p>State of programming in this world, dont take the first talk seriously :</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=csyL9EC0S0c">Programming Is Terible - Tef</a></li>\n<li><a href="https://www.youtube.com/watch?v=0SARbwvhupQ">The Myth of Genius Programmer - Brian Fitzpatrick, Ben Collins-Sussman</a></li>\n</ul>\n<p>And some talks about code style :</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=ZsHMHukIlJY">7 Innecfective Coding Habbit - Kevin Henley</a></li>\n<li><a href="https://www.youtube.com/watch?v=o_TH-Y78tt4">Clean Coding - Uncle Bob</a></li>\n<li><a href="https://www.youtube.com/watch?v=OQ5jsbhAv_M">Dynamic Programming, Fibbonaci Shotest Path</a></li>\n</ul>\n<p>Some genius talks about programming culture :</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=ecIWPzGEbFc&amp;t=15s">The Future Of Programming</a></li>\n<li><a href="https://www.youtube.com/watch?v=DngAZyWMGR0">Making Architecture Matter</a></li>\n</ul>\n<h4>That is all...</h4>\n<p>There so many gems you could find on the Internet, however if something are opinionated just take it as it was you can agree or not is up to you 😁</p>\n</section>\n'},158:function(n,e,t){"use strict";t.r(e),e.default='<section><hr>\n<h2>id: 1<br>\ntitle: Simple Blog Site With Nuxt and Markdown<br>\ncreated_date: 13/04/2019<br>\nslug: simple_blog_site_with_nuxt_and_markdown<br>\nfilename: 13-04-2019-simple_blog_site_with_nuxt_and_markdown<br>\ncategory: tutorial</h2>\n<blockquote>\n<p>Selamat tinggal website yang dulu...</p>\n</blockquote>\n<p>Hai! 😃 dan selamat datang di blog baru ini sebelumnya maaf jika ini memakan waktu lama hanya untuk website dengan fitur tak banyak ini. JAMStack sendiri sudah cukup lama berkembang sejak saya mengenalnya 2017 lalu melalui sebuah perusahaan bernama <a href="https://www.youtube.com/watch?v=rB4Cl5LSe2c">netlify</a> yang berhasil me-<em>rework</em> sebuah website yang suka saya kunjungi saat sedang <a href="https://www.smashingmagazine.com/">belajar programming</a> sampai sekarang berkarir di dunia ini.</p>\n<h2>Cukup simple</h2>\n<p>KISS dengan adanya <s>banyak</s> bantuan dari module di NPM... Cukup simple dan bahkan sebenarnya kita dapat menyelesaikannya satu hari.</p>\n<h2>Markdown Parsing</h2>\n<p>Bagian markdown-parsing saya menggunakan <a href="https://github.com/nuxt-community/modules/tree/master/packages/markdownit">markdown-it</a> module ofisial dari nuxtjs. Saya agak mendapatakan sedikit trouble menggunakan <a href="https://github.com/mdx-js/mdx">mdx</a> padahal menurut saya ini lebih powerfull daripada sekedar parsing. Karena saya menganut filosofi <em>dadi sik update sesuk</em> maka saya memilih <a href="https://github.com/nuxt-community/modules/tree/master/packages/markdownit">markdown-it</a></p>\n<pre><code class="language-js"><span class="hljs-comment">// nuxt.config.js</span>\n\nmodules: [<span class="hljs-string">\'@nuxtjs/markdownit\'</span>],\n<span class="hljs-attr">markdownit</span>: {\n  <span class="hljs-attr">html</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">preset</span>: <span class="hljs-string">\'default\'</span>,\n  <span class="hljs-attr">linkify</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">breaks</span>: <span class="hljs-literal">true</span>\n},\n\n</code></pre>\n<p>dan kita bisa menggunakannya dengan</p>\n<pre><code class="language-js"><span class="hljs-comment">// vue template you use</span>\n\n&lt;template&gt;\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"postContent"</span>/&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span>\n\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">computed</span>: {\n    postContent() {\n      <span class="hljs-keyword">const</span> post = <span class="hljs-keyword">this</span>.$store.state.post\n      <span class="hljs-comment">// path to filename</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">`../../content/post/<span class="hljs-subst">${post.filename}</span>.md`</span>)\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>\n</code></pre>\n<h2>Content Title and Blogpost Meta</h2>\n<p>Untuk hal ini saya manfaatkan <a href="http://assemble.io/docs/YAML-front-matter.html">YAML front matter</a> pada markdown. Sayangnya <em>markdown-it</em> mendeteksi YAML front matter ini sebagai <code>h2</code> dan di parse ke html 😄 jadi ya saya nemu <s>workaround</s> yang paling tidak bekerja di website saya.</p>\n<pre><code class="language-js"><span class="hljs-comment">// remove yaml from blogpost 😁</span>\nmounted() {\n  <span class="hljs-keyword">const</span> h2 = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'h2\'</span>)\n  h2[<span class="hljs-number">0</span>].outerHTML = <span class="hljs-string">\'\'</span>\n}\n</code></pre>\n<p>Kembali ke topik meta tadi untuk parser YAML saya memakai <code>gray-matter</code> sebenarnya ini terlalu <em>powerfull</em>-sih tapi saya tidak bisa menemukan yang lebih simple lagi di NPM. Lalu kita buat simple script untuk men-generate meta kita.</p>\n<pre><code class="language-js"><span class="hljs-comment">// create-post-list.js</span>\n\n<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'fs\'</span>)\n<span class="hljs-keyword">const</span> matter = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'gray-matter\'</span>)\n<span class="hljs-comment">// eslint-disable-next-line no-path-concat</span>\n<span class="hljs-keyword">const</span> files = fs.readdirSync(__dirname + <span class="hljs-string">\'/content/post\'</span>)\n\n<span class="hljs-built_in">console</span>.time(<span class="hljs-string">\'⏲\'</span>)\n\n<span class="hljs-keyword">const</span> posts = []\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> files) {\n  <span class="hljs-comment">// eslint-disable-next-line no-path-concat</span>\n  <span class="hljs-keyword">const</span> str = fs.readFileSync(__dirname + <span class="hljs-string">`/content/post/<span class="hljs-subst">${files[i]}</span>`</span>, <span class="hljs-string">\'utf8\'</span>)\n  <span class="hljs-keyword">const</span> post = matter(str).data\n  posts.push(post)\n}\n\n<span class="hljs-comment">//  to JSON</span>\n<span class="hljs-keyword">const</span> data = <span class="hljs-built_in">JSON</span>.stringify(posts)\nfs.writeFileSync(<span class="hljs-string">\'blogposts.json\'</span>, data)\n\n<span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">\'⏲\'</span>)\n</code></pre>\n<p>Bang! dengan ini kita punya <em>single source of truth</em> yang gampang kita gunakan, adanya <code>blogposts.json</code> ini bisa digunakan juga untuk <a href="https://xkcd.com/208/">mempermudah</a> proses generate route di <code>nuxt.config.js</code></p>\n<pre><code class="language-js"><span class="hljs-comment">// nuxt.config.js</span>\n\n<span class="hljs-keyword">const</span> blogJSON = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'./blogposts.json\'</span>)\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateStaticRoute</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">const</span> route = []\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; blogJSON.length; i++) {\n    <span class="hljs-comment">// add /blog in frot of string</span>\n    <span class="hljs-keyword">const</span> blog = blogJSON[i].slug.replace(<span class="hljs-regexp">/^/</span>, <span class="hljs-string">\'/blog/\'</span>)\n    route.push(blog)\n  }\n  <span class="hljs-keyword">return</span> route\n}\n\n<span class="hljs-comment">// pages routes automaticaly generated with nuxt 🚄</span>\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">generate</span>: {\n    <span class="hljs-attr">routes</span>: generateStaticRoute()\n  }\n}\n</code></pre>\n<p>dengan tambahan script di <code>package.json</code> untuk run ini selesai sudah.</p>\n<p>Kita juga gunakan <code>blogpost.json</code> tadi pada <code>vuex</code> store untuk <code>fetch</code> data artikel ini.</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> dataJson <span class="hljs-keyword">from</span> <span class="hljs-string">\'../blogposts.json\'</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> state = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> ({\n  <span class="hljs-attr">posts</span>: [],\n  <span class="hljs-attr">post</span>: {}\n})\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mutations = {\n  updatePosts(state, postsJSON) {\n    state.posts = postsJSON\n  },\n  updatePost(state, { post }) {\n    state.post = post\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> actions = {\n  getPost({ commit, state }, slug) {\n    <span class="hljs-keyword">const</span> post = state.posts.find(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> {\n      <span class="hljs-keyword">return</span> post.slug === slug\n    })\n    commit(<span class="hljs-string">\'updatePost\'</span>, { <span class="hljs-attr">post</span>: post })\n  },\n  getListOfPost({ commit, state }) {\n    <span class="hljs-keyword">if</span> (state.posts.length === <span class="hljs-number">0</span>) commit(<span class="hljs-string">\'updatePosts\'</span>, dataJson)\n  }\n}\n</code></pre>\n<p>naaah dengan ini kita <code>fetch</code> meta data blogpost kita yg ada pada <em>markdown</em> di <em>vue-template</em></p>\n<pre><code class="language-js">fetch({ store, params }) {\n  <span class="hljs-comment">// in case user reload the page</span>\n  store.dispatch(<span class="hljs-string">\'getListOfPost\'</span>)\n  <span class="hljs-comment">//  fetch post</span>\n  store.dispatch(<span class="hljs-string">\'getPost\'</span>, params.slug)\n},\n</code></pre>\n<h2>Code highlighting</h2>\n<p>Saya pilih yang paling ringan <a href="https://prismjs.com/">Prism.js</a> penggunaannya cukup simple.</p>\n<pre><code class="language-js"><span class="hljs-comment">// _slug.vue</span>\n\nmounted() {\n  <span class="hljs-keyword">const</span> block = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">\'code\'</span>)\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; block.length; ++i) {\n    block[i].classList.add(<span class="hljs-string">\'language-javascript\'</span>)\n  }\n  <span class="hljs-comment">//  remove yaml title</span>\n  <span class="hljs-keyword">const</span> h2 = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'h2\'</span>)\n  h2[<span class="hljs-number">0</span>].outerHTML = <span class="hljs-string">\'\'</span>\n  <span class="hljs-comment">// hightlight code</span>\n  Prism.highlightAll()\n}\n</code></pre>\n<p>Enaknya memakai prism sendiri ini style dapat kita kustomisasi dengan mudah 😍.</p>\n<h2>Still on progress</h2>\n<p>Jika anda membaca sampai sini ini isinya hanya curhatan saja. Saya ada juga mengalami blocker lain selain kesusahan saat mengapliaksikan <code>mdx</code> di project ini. Salah-satunya adalah <a href="https://github.com/FullHuman/purgecss">purgecss</a>, project ini menggunakan <a href="https://tailwindcss.com/docs/what-is-tailwind/">TailwindCSS</a> dimana jika tidak di kompress atau dikurangi class yang tidak digunakan maka size CSS-nya cukup besar yaitu 38.6kb.</p>\n<p>Saat saya memutuskan menggukan <a href="https://github.com/FullHuman/purgecss">purgecss</a>, CSS custom saya banyak kena <em>trim</em> 😄 walaupun sudah saya include beberapa class yang tidak boleh di <em>trim</em>. Saya selalu strich soal size, saya sering curi <em>soure code</em>-nya <a href="https://lodash.com/docs/4.17.11">lodash</a> kalau hanya dipakai 4/6 fungsi saja pada proyek saya daripada harus meng-install-nya.</p>\n<p><strong>Commenting on blog</strong> sebenarnya saya mau menyematkan fitur komen pada blog ini, menggunakan <a href="https://utteranc.es/">utteranc.es</a> darapida discus ... tapi kok style-nya kurang cocok jadi saya harus menyesuaikannya sedikit dengan website ini.</p>\n<p>Karena saya tidak begitu paham paham benar soal CSS. Kadang masih bingung ini kenapa <code>height: 100%</code> kok tidak bisa bisa 😂. Dengan ini saya nyatakan itu fitur berikutnya saja hehe.</p>\n<p><img src="https://i.imgur.com/Y0ccb6j.png" alt="I\'m backend dev" title="I\'m backend dev!"></p>\n<p>Okay semoga anda menikmati first-post saya ini dan mendapat setidaknya sedikit ilmu 😁 oh yah untuk meninggalkan komen anda dapat mengunjungi github issue <a href="https://github.com/mandaputtra/mandaputtra.github.io/issues/2">ini</a> sambil saya coba coba integrasi <em>untterances</em> tadi.</p>\n<p>Tidak lupa source code untuk website ini ada di <a href="https://github.com/mandaputtra/mandaputtra.github.io/tree/develop">sini</a></p>\n</section>\n'},159:function(n,e,t){"use strict";t.r(e),e.default='<section><hr>\n<h2>id: 2<br>\ntitle: Trying Queue with node-resque<br>\ncreated_date: 18/04/2019<br>\nslug: trying_queue_with_node_resque<br>\nfilename: 18-04-2019-trying_queue_with_node_resque<br>\ncategory: tutorial</h2>\n<p>Hi, kali ini saya akan membahas bagaimana cara kita memanfaatkan fitur <em>background jobs</em> atau <em>queue</em> (antrian) yang bakalan sering kita gunakan.</p>\n<h2>Use Case!</h2>\n<p>Queue biasanya digunakan untuk memproses sesuatu yang sekiranya dapat dilakukan di belakang layar tanpa adanya interferensi dari user. Seperti mengirimkan email, video encoding, image processing dan berbagai hal lainnya. Salah satu pengalaman saya pribadi, hal ini sangat berguna saat kita ingin mem-<em>blast</em> ribuan email (atau hanya kirim satu email) atau hanya sekedar video encoding dengan <em>ffmpg</em>.</p>\n<p>Jika kita menggunakan third-party service untuk pengirimen email/sms sangat disarankan untuk menggunkan <em>queue</em> dikarenkan service tersebut bisa saja kapan kapan down dan failure, ini dapat diatasi baik oleh <em>queue</em>. Setiap proses pada <em>queue</em> seperti sebuah log history, jadi kita bisa tau mana yang gagal dan mungkin dapat dilakukan <em>retry</em> atau hal lain.</p>\n<p>Pengiriman email/sms tanpa menggunkan background jobs bisa saja mem-block <em>main-thread</em> pada aplikasi kita, terutama jika kita menggunakan node.js dimana kita harus mempertimbangkan apakah code ini benar benar memblock <em>main-thread</em> atau tidak. Untuk pengecekannya kita bisa gunakan profiling atau contoh simpel code berikut yang dapat memblock <em>main-thread</em> di aplikasi kita :</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'fs\'</span>);\n<span class="hljs-keyword">const</span> data = fs.readFileSync(<span class="hljs-string">\'/file.md\'</span>); <span class="hljs-comment">// blocks here until file is read</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-comment">//  non blocking</span>\n<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'fs\'</span>);\nfs.readFile(<span class="hljs-string">\'/file.md\'</span>, (err, data) =&gt; {\n  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;\n});\n</code></pre>\n<p>Sepertinya akan lebih indah jika artikel selanjutnya membahas tentang <code>blocking</code> dan <code>non-blocking</code> code, I/O dan mungkin sedikit profiling 😄.</p>\n<h2>Lest get to the code...</h2>\n<p>Ini hanya <em>que</em> (lest just call it <em>que</em> from now on...) simpel tidak ada multiworker dan sebagainya, but <em>at least</em> setidaknya meng-cover sedikit tentang bagaimana <em>que</em> itu sendiri bekerja.</p>\n<p><em>Que</em> biasanya menggunakan algoritma FIFO (First In First Out) pada kali ini kita akan membuat kalkulator sederhana yg dimana nantinya proses kalkulasi akan dilakukan di <em>que</em>. Mari kita buat aplikasi kalkulaktor terminal kita yang simpel ini.</p>\n<pre><code class="language-js"><span class="hljs-comment">// calculator.js</span>\n<span class="hljs-keyword">const</span> vorpal = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'vorpal\'</span>)()\n<span class="hljs-keyword">const</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'ioredis\'</span>)\n<span class="hljs-keyword">const</span> redis = <span class="hljs-keyword">new</span> Redis()\n<span class="hljs-keyword">const</span> pub = <span class="hljs-keyword">new</span> Redis()\n\n<span class="hljs-comment">//  subscribe to jobs</span>\nredis.subscribe(<span class="hljs-string">\'jobs\'</span>)\n\nvorpal.show()\n\nvorpal\n  .command(<span class="hljs-string">\'calc [numbers...]\'</span>)\n  .action(<span class="hljs-function">(<span class="hljs-params">args, callback</span>) =&gt;</span> {\n    <span class="hljs-comment">// convert array to strings</span>\n    <span class="hljs-keyword">let</span> str = args.numbers.join(<span class="hljs-string">\' \'</span>)\n    pub.publish(<span class="hljs-string">\'jobs\'</span>, str)\n    <span class="hljs-comment">// prompt again</span>\n    <span class="hljs-comment">// this is why I use the lib no need to call</span>\n    <span class="hljs-comment">// tailed prompt in node.js core</span>\n    callback()\n  })\n</code></pre>\n<p>Seperti biasa dengan kekuatan komunitas dan NPM cukup seperti itu saja sudah jadi. Sebelumnya jika ingin membuat dengan pure nodejs tanpa bantuan <code>vorpal</code>, kita bisa gunakan <code>prompt</code> module dari node.js core.</p>\n<p>Kali ini kita memerlukan redis untuk komunikasi (<em>pub/sub</em>) antar node (kalkulator dan que-jobs) jadi pastikan untuk setup redis di mesin yang kita gunakan. Ada beberapa jenis <em>que</em> biasanya kalau <em>que</em> itu tergolong simple dan tidak berat proses <em>que</em> sendiri tidak dipisahkandengan aplikasi atau berjalan satu <em>instance</em>. Pada kali ini kita akan membuat <em>que</em> yang berkomunikasi lewat <em>memcached</em> (Redis) atau bisa kita pisahkan server aplikasi dengan background-jobs.</p>\n<p>Pada kali ini kita akan gunakan <code>node-resque</code> sebuah library que yang menurut saya mempunyai interface yang simple dan setidaknya memiliki fitur sceduler dan lain lain.</p>\n<pre><code class="language-js"><span class="hljs-comment">// que.js</span>\n<span class="hljs-keyword">const</span> NodeResque = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'node-resque\'</span>)\n<span class="hljs-keyword">const</span> Redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'ioredis\'</span>)\n<span class="hljs-keyword">const</span> redis = <span class="hljs-keyword">new</span> Redis()\n<span class="hljs-keyword">const</span> pub = <span class="hljs-keyword">new</span> Redis()\n<span class="hljs-keyword">const</span> math = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'mathjs\'</span>)\n<span class="hljs-comment">// subschannel in redis</span>\nredis.subscribe(<span class="hljs-string">\'jobs\'</span>)\n\n<span class="hljs-comment">// connect to redis</span>\n<span class="hljs-keyword">const</span> connectionDetails = {\n  <span class="hljs-attr">pkg</span>: <span class="hljs-string">\'ioredis\'</span>,\n  <span class="hljs-attr">host</span>: <span class="hljs-string">\'127.0.0.1\'</span>,\n  <span class="hljs-attr">password</span>: <span class="hljs-literal">null</span>,\n  <span class="hljs-attr">port</span>: <span class="hljs-number">6379</span>,\n  <span class="hljs-attr">database</span>: <span class="hljs-number">0</span>\n}\n\n<span class="hljs-comment">// define a jobs</span>\n<span class="hljs-keyword">const</span> jobs = {\n  <span class="hljs-string">\'calc\'</span>: {\n    <span class="hljs-attr">perform</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">message</span>) </span>{\n      <span class="hljs-keyword">return</span> math.eval(message)\n    }\n  }\n}\n\n<span class="hljs-comment">// initialize worker</span>\n<span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">new</span> NodeResque.Worker({ <span class="hljs-attr">connection</span>: connectionDetails, <span class="hljs-attr">queues</span>: [<span class="hljs-string">\'number\'</span>] }, jobs)\nworker.connect().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> worker.start() )\n\nworker.on(<span class="hljs-string">\'start\'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'worker started\'</span>) })\nworker.on(<span class="hljs-string">\'end\'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'worker ended\'</span>) })\nworker.on(<span class="hljs-string">\'poll\'</span>, (queue) =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`worker polling <span class="hljs-subst">${queue}</span>`</span>) })\nworker.on(<span class="hljs-string">\'ping\'</span>, (time) =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`worker check in @ <span class="hljs-subst">${time}</span>`</span>) })\nworker.on(<span class="hljs-string">\'job\'</span>, (queue, job) =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`working job <span class="hljs-subst">${queue}</span> <span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(job)}</span>`</span>) })\nworker.on(<span class="hljs-string">\'success\'</span>, (queue, job, result) =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`job success <span class="hljs-subst">${queue}</span> <span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(job)}</span> &gt;&gt; <span class="hljs-subst">${result}</span>`</span>) })\nworker.on(<span class="hljs-string">\'pause\'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'worker paused\'</span>) })\n\n<span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> NodeResque.Queue({ <span class="hljs-attr">connection</span>: connectionDetails }, jobs)\nqueue.on(<span class="hljs-string">\'error\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{ <span class="hljs-built_in">console</span>.log(error) })\n\nqueue.connect().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n  redis.on(<span class="hljs-string">\'message\'</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, message</span>) </span>{\n    <span class="hljs-keyword">await</span> queue.enqueue(<span class="hljs-string">\'number\'</span>, <span class="hljs-string">\'calc\'</span>, message)\n  })\n})\n</code></pre>\n<p>Thats it! jalankan di dua terminal, satu untuk kalkulator dan satunya untuk background jobs/<em>que</em> kita. untuk mengunakan kalkulator kita hanya perlu mengetikan <code>calc 12 + 4 * 10 / 2</code>. Ingat sebelum memasukan angka kita harus panggil <code>calc</code> karena kita sudah mendefinisaknnya sebagai command pada aplikasi kalkulator terminal kita <code>.command(\'calc [numbers...]\')</code>.</p>\n<h2>Lest breaks it down!</h2>\n<p>Kedua aplikasi yang kita buat tersebut sama sama berkomunikasi lewat Redis dengan cara <em>pub/sub</em> <code>redis.subscribe(\'jobs\')</code> untuk saling bertukar data. Ini adalah fitur yang sering digunakan di Redis. Kalkulator mengirim message lewat redis melalui <em>pub</em> <code>pub.publish(\'jobs\', str)</code>.</p>\n<p>Sekarang untuk job handling <code>node-resque</code> mengunkaan yang namanya <code>worker</code> dimana harus kita panggil dengan :</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">new</span> NodeResque.Worker({\n  <span class="hljs-attr">connection</span>: connectionDetails,\n  <span class="hljs-comment">// queue names</span>\n  queues: [<span class="hljs-string">\'number\'</span>] },\n  <span class="hljs-comment">// jobs</span>\n  jobs\n)\nworker.connect().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> worker.start() )\n</code></pre>\n<p>worker sendiri berkerja untuk mengecek apakah ada <em>jobs/que</em> yang masih ketinggal atau tidak, jika ada maka akan di proses. Kadang kita juga ingin mematikan proses worker di kondisi tertentu. Misal saat kita menghentikan server yang bertugas sebagai worker, kita bisa saja menggunakan <code>process</code> module dari node.js, seperti <code>SIGNINT</code> atau <code>SIGTERM</code>, :</p>\n<pre><code class="language-js">process.on(<span class="hljs-string">\'SIGINT\'</span>, <span class="hljs-keyword">async</span> () =&gt; {\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Clearing Que\'</span>)\n  <span class="hljs-keyword">await</span> queue.end()\n  <span class="hljs-keyword">await</span> worker.end()\n  process.exit()\n})\n</code></pre>\n<p>Sebelum kita konek dengan worker biasanya kita definisikan dulu jobs yang akan di proses :</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> jobs = {\n  <span class="hljs-string">\'calc\'</span>: {\n    <span class="hljs-attr">perform</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">message</span>) </span>{\n      <span class="hljs-keyword">return</span> math.eval(message)\n    }\n  }\n}\n</code></pre>\n<p>\'calc\' ini adalah nama dari jobs tersebut. setelah Worker di registrasikan dan jobs sudah ada maka kita daftarkan jobs tersebut ke <em>que</em> menggunakan module <code>NodeResque.Queue</code> :</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> NodeResque.Queue({\n  <span class="hljs-attr">connection</span>: connectionDetails\n}, jobs)\nqueue.on(<span class="hljs-string">\'error\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{ <span class="hljs-built_in">console</span>.log(error) })\n\nqueue.connect().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n  redis.on(<span class="hljs-string">\'message\'</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel, message</span>) </span>{\n    <span class="hljs-comment">// register que to worker</span>\n    <span class="hljs-comment">// number ==&gt; que name</span>\n    <span class="hljs-comment">// calc ==&gt; jobs name</span>\n    <span class="hljs-keyword">await</span> queue.enqueue(<span class="hljs-string">\'number\'</span>, <span class="hljs-string">\'calc\'</span>, message)\n  })\n})\n</code></pre>\n<p>Nah komunikasi redis pub/sub biasanya dapat kita peroleh melalui <code>redis.on</code> yang memiliki 2 parameter yaitu <code>channel</code> dan <code>message</code>. Pada contoh ini channel adalah <code>jobs</code> dan cara publish message ke channel dengan <code>pub.publish(namaChannel, message)</code> simple! 😄.</p>\n<p>Yak, sepertinya sampai disini dulu pembahasan tentang queue/background-jobs, tidak lupa saya tinggalkan beberapa link penting untuk referensi :</p>\n<ul>\n<li><a href="https://github.com/taskrabbit/node-resque/tree/master/examples">node-resque example</a></li>\n<li><a href="https://youtu.be/NNTsHzER31I">background jobs talks</a></li>\n</ul>\n<p>Thanks! hit me up on twitter!</p>\n</section>\n'},164:function(n,e,t){"use strict";t.r(e);var l=t(154),r=t.n(l),o={head:function(){return{title:this.post.title}},layout:"blogpost",transition:"bounce",computed:{post:function(){return this.$store.state.post},postContent:function(){var n=this.$store.state.post;return t(155)("./".concat(n.filename,".md"))}},fetch:function(n){var e=n.store,t=n.params;e.dispatch("getListOfPost"),e.dispatch("getPost",t.slug)},mounted:function(){for(var n=document.querySelectorAll("code"),i=0;i<n.length;++i)n[i].classList.add("language-javascript");document.getElementsByTagName("h2")[0].outerHTML="",r.a.highlightAll()}},c=t(13),component=Object(c.a)(o,function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"mt-8 pt-8"},[e("div",{staticClass:"article",domProps:{innerHTML:this._s(this.postContent.default)}})])},[],!1,null,null,null);e.default=component.exports}}]);